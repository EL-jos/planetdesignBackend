<?php

namespace App\Models;

use App\Notifications\RequestRegister;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Facades\URL;
use Illuminate\Support\Str;
use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'lastname',
        'firstname',
        'email',
        'password',
        'company',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];


    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::created(function ($user){
            // Logique à exécuter après l'insertion du modèle

            $user->notify(new RequestRegister($user));
        });
    }

    public function quotes(){
        return $this->hasMany(Quote::class);
    }

    public function orders(){
        return $this->hasMany(Order::class);
    }

    public function favorites()
    {
        return $this->hasMany(Favorite::class);
    }

    public function catalogs()
    {
        return $this->hasMany(Catalog::class);
    }

    public function toggleFavorite($articleId)
    {
        if ($this->favorites()->where('article_id', $articleId)->exists()) {
            $this->favorites()->where('article_id', $articleId)->delete();
            return 'removed';
        } else {
            $this->favorites()->create(['id' => (string) Str::uuid(), 'article_id' => $articleId]);
            return 'added';
        }
    }
}
